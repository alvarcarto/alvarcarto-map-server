version: 2.1
parameters:
  manual_start:
    type: boolean
    default: false
  wait:
    type: boolean
    default: false
  finish_install:
    type: boolean
    default: false
  test_and_deploy:
    type: boolean
    default: false

workflows:
  start_install_manual:
    when: << pipeline.parameters.manual_start >>
    jobs:
      - start_install

  start_install_automatic:
    jobs:
      - start_install

    triggers:
        # Every Monday at 12:00 or 13:00 Helsinki time (depending on DST)
      - schedule:
          cron: "0 10 * * 1"
          filters:
            branches:
              only:
                - master

  # Remote server will start this step after installation is ready to proceed
  # This would also work on it's own as a polling job, but it spends so much computation
  # credits in Circle CI it makes no sense
  wait_for_install:
    when: << pipeline.parameters.wait >>
    jobs:
      - wait_for_install

  finish_install:
    when: << pipeline.parameters.finish_install >>
    jobs:
      - finish_install

  # This is a separate task so that we are able to independently install the server and
  # test installation if needed. Not sure if this separation will be useful but at least
  # in dev phase it helps
  test_and_deploy:
    when: << pipeline.parameters.test_and_deploy >>
    jobs:
      - test_release_candidate
      - warm_caches:
          requires:
            - test_release_candidate
      - deploy_to_production:
          type: approval
          requires:
            - warm_caches
      - update_snapshots:
          requires:
            - deploy_to_production

jobs:
  start_install:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt

      - run:
          name: Start server installation
          command: |
            export MAP_SERVER_INSTALL_DIR=/home/alvar
            export MAP_SERVER_DATA_DIR=/home/alvar/data
            export ALVAR_ENV=qa
            python manage-servers.py start_install

  wait_for_install:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt

      - run:
          name: Wait for install to finish
          command: |
            bash .circleci/wait-loop.sh

  finish_install:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt

      - run:
          name: Wait for install to finish
          command: |
            mkdir -p ~/repo/artifacts
            python manage-servers.py finish_install
            python manage-servers.py download_file '/home/alvar/screenlog.0' ~/repo/artifacts/screenlog.0

      - run:
          name: Launch test and deploy
          command: |
            bash .circleci/launch-test-and-deploy.sh

      - store_artifacts:
          path: ~/repo/artifacts

  test_release_candidate:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            # When taking SSH into the box, it had python 3.5.3, but no pip
            sudo apt-get install python3-pip
            pip3 install -r requirements.txt

      - deploy:
          name: Run tests for release candidate server
          command: |
            IP=$(python3 manage-servers.py get_tile_api_reserve_ip)

            git clone "https://alvarcarto-integration:$GITHUB_INTEGRATION_USER_TOKEN@github.com/alvarcarto/alvarcarto-render-snapshot.git"
            cd alvarcarto-render-snapshot
            npm i

            export RENDER_API_URL="http://$IP:8001"
            export RENDER_API_KEY=PERSONxMz4jp8tgACSKL7r
            export PLACEMENT_API_URL="http://$IP:8003"
            export PLACEMENT_API_KEY=TRAVISx1902AjdkTnsadjI
            export AWS_S3_BUCKET_NAME=alvarcarto-render-snapshots
            export AWS_ACCESS_KEY_ID="$SNAPSHOT_TOOL_AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$SNAPSHOT_TOOL_AWS_SECRET_ACCESS_KEY"

            npm run compare

      - store_artifacts:
          path: ~/repo/images

  warm_caches:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Warm server caches
          command: |
            npm install @alvarcarto/tilewarm
            curl -O https://raw.githubusercontent.com/alvarcarto/tilewarm/master/geojson/world.geojson
            curl -O https://raw.githubusercontent.com/alvarcarto/tilewarm/master/geojson/all-cities.geojson

            IP=$(python manage-servers.py get_tile_api_reserve_ip)
            # Iterate all styles in cartocss repo
            NODE_OPTIONS=--max_old_space_size=4096 tilewarm "http://$IP:8002/bw/{z}/{x}/{y}/tile.png" --input world.geojson -c 10 --zoom 1-8 --verbose
            NODE_OPTIONS=--max_old_space_size=4096 tilewarm "http://$IP:8002/bw/{z}/{x}/{y}/tile.png" --input all-cities.geojson -c 10 --zoom 8-13 --verbose


  deploy_to_production:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt

      - deploy:
          name: Promote release candidate server to production via DNS
          command: |
            python manage-servers.py promote_reserve_to_production

      - run:
          name: Clear previously cached tiles and renders
          command: |
            python manage-servers.py purge_cloudflare_cache

  update_snapshots:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            # When taking SSH into the box, it had python 3.5.3, but no pip
            sudo apt-get install python3-pip
            pip3 install -r requirements.txt

      - deploy:
          name: Update poster snapshots to S3
          command: |
            IP=$(python3 manage-servers.py get_tile_api_ip)

            git clone "https://alvarcarto-integration:$GITHUB_INTEGRATION_USER_TOKEN@github.com/alvarcarto/alvarcarto-render-snapshot.git"
            cd alvarcarto-render-snapshot
            npm install

            export RENDER_API_URL="http://$IP:8001"
            export RENDER_API_KEY=TRAVISx1902AjdkTnsadjI
            export PLACEMENT_API_URL="http://$IP:8003"
            export PLACEMENT_API_KEY=TRAVISx1902AjdkTnsadjI
            export AWS_S3_BUCKET_NAME=alvarcarto-render-snapshots
            export AWS_ACCESS_KEY_ID="$SNAPSHOT_TOOL_AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$SNAPSHOT_TOOL_AWS_SECRET_ACCESS_KEY"
            npm run snapshot
